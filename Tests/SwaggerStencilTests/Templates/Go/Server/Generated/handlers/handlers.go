//
// Generated by SwaggerStencil
// https://github.com/AttilaTheFun/SwaggerStencil
//

package handlers

import (
	"net/http"
	"strconv"
)

// GetEstimatesTimeHandler - The Time Estimates endpoint returns ETAs for all products offered at a given location, with
// the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the
// most accurate, up-to-date ETAs.
func GetEstimatesTimeHandler(w http.ResponseWriter, r *http.Request) {

	queryParameters := r.URL.Query()

	startLatitudeString := queryParameters.Get("start_latitude")
	startLatitude, err := strconv.ParseFloat(startLatitudeString, 64)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(err.Error()))
		return
	}

	startLongitudeString := queryParameters.Get("start_longitude")
	startLongitude, err := strconv.ParseFloat(startLongitudeString, 64)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(err.Error()))
		return
	}

	customerUUID := queryParameters.Get("customer_uuid")
	productID := queryParameters.Get("product_id")

}

// GetProductsHandler - The Products endpoint returns information about the Uber products offered at a given location.
// The response includes the display name and other details about each product, and lists the products in the proper
// display order.
func GetProductsHandler(w http.ResponseWriter, r *http.Request) {

	queryParameters := r.URL.Query()

	latitudeString := queryParameters.Get("latitude")
	latitude, err := strconv.ParseFloat(latitudeString, 64)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(err.Error()))
		return
	}

	longitudeString := queryParameters.Get("longitude")
	longitude, err := strconv.ParseFloat(longitudeString, 64)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(err.Error()))
		return
	}

}

// GetEstimatesPriceHandler - The Price Estimates endpoint returns an estimated price range for each product offered at
// a given location. The price estimate is provided as a formatted string with the full price range and the localized
// currency symbol.<br><br>The response also includes low and high estimates, and the [ISO
// 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for situations requiring currency conversion. When surge
// is active for a particular product, its surge_multiplier will be greater than 1, but the price estimate already
// factors in this multiplier.
func GetEstimatesPriceHandler(w http.ResponseWriter, r *http.Request) {

	queryParameters := r.URL.Query()

	startLatitudeString := queryParameters.Get("start_latitude")
	startLatitude, err := strconv.ParseFloat(startLatitudeString, 64)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(err.Error()))
		return
	}

	startLongitudeString := queryParameters.Get("start_longitude")
	startLongitude, err := strconv.ParseFloat(startLongitudeString, 64)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(err.Error()))
		return
	}

	endLatitudeString := queryParameters.Get("end_latitude")
	endLatitude, err := strconv.ParseFloat(endLatitudeString, 64)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(err.Error()))
		return
	}

	endLongitudeString := queryParameters.Get("end_longitude")
	endLongitude, err := strconv.ParseFloat(endLongitudeString, 64)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(err.Error()))
		return
	}

}

// GetHistoryHandler - The User Activity endpoint returns data about a user's lifetime activity with Uber. The response
// will include pickup locations and times, dropoff locations and times, the distance of past requests, and information
// about which products were requested.<br><br>The history array in the response will have a maximum length based on the
// limit parameter. The response value count may exceed limit, therefore subsequent API requests may be necessary.
func GetHistoryHandler(w http.ResponseWriter, r *http.Request) {

	queryParameters := r.URL.Query()

	offsetString := queryParameters.Get("offset")
	offset, err := strconv.ParseInt(offsetString, 10, 64)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(err.Error()))
		return
	}

	limitString := queryParameters.Get("limit")
	limit, err := strconv.ParseInt(limitString, 10, 64)
	if err != nil {
		w.WriteHeader(400)
		w.Write([]byte(err.Error()))
		return
	}

}

// GetMeHandler - The User Profile endpoint returns information about the Uber user that has authorized with the
// application.
func GetMeHandler(w http.ResponseWriter, r *http.Request) {

}
